# Import libraries.
import unittest
# Import from project.
# # Import implementations to test.
from python import NumPuzzleL, NumPuzzleD, NumPuzzleS

# NumPuzzle class to run tests with. Change to run tests with a different implementation.
NumPuzzle = NumPuzzleL.NumPuzzle


class AtTests(unittest.TestCase):
    def test_input_validation(self):
        # Check if invalid input raises errors.
        # # NumPuzzle with same width and height.
        numpu = NumPuzzle(size=(3, 3), seed=0)
        self.assertRaises(ValueError, numpu._at, (-1, -1))
        self.assertRaises(ValueError, numpu._at, (-1, 0))
        self.assertRaises(ValueError, numpu._at, (0, -1))
        self.assertRaises(ValueError, numpu._at, (3, 3))
        self.assertRaises(ValueError, numpu._at, (2, 3))
        self.assertRaises(ValueError, numpu._at, (3, 2))
        self.assertRaises(ValueError, numpu._at, (-1, 3))
        self.assertRaises(ValueError, numpu._at, (3, -1))
        # # NumPuzzles with different width and height.
        numpu = NumPuzzle(size=(3, 2), seed=0)
        self.assertRaises(ValueError, numpu._at, (-1, -1))
        self.assertRaises(ValueError, numpu._at, (-1, 0))
        self.assertRaises(ValueError, numpu._at, (0, -1))
        self.assertRaises(ValueError, numpu._at, (3, 2))
        self.assertRaises(ValueError, numpu._at, (2, 2))
        self.assertRaises(ValueError, numpu._at, (3, 1))
        self.assertRaises(ValueError, numpu._at, (-1, 2))
        self.assertRaises(ValueError, numpu._at, (3, -1))
        numpu = NumPuzzle(size=(2, 3), seed=0)
        self.assertRaises(ValueError, numpu._at, (-1, -1))
        self.assertRaises(ValueError, numpu._at, (-1, 0))
        self.assertRaises(ValueError, numpu._at, (0, -1))
        self.assertRaises(ValueError, numpu._at, (2, 3))
        self.assertRaises(ValueError, numpu._at, (2, 2))
        self.assertRaises(ValueError, numpu._at, (1, 3))
        self.assertRaises(ValueError, numpu._at, (-1, 3))
        self.assertRaises(ValueError, numpu._at, (2, -1))
        # # Edge cases.
        numpu = NumPuzzle(size=(3, 1), seed=0)
        self.assertRaises(ValueError, numpu._at, (-1, -1))
        self.assertRaises(ValueError, numpu._at, (-1, 0))
        self.assertRaises(ValueError, numpu._at, (0, -1))
        self.assertRaises(ValueError, numpu._at, (3, 1))
        self.assertRaises(ValueError, numpu._at, (2, 1))
        self.assertRaises(ValueError, numpu._at, (3, 0))
        self.assertRaises(ValueError, numpu._at, (-1, 1))
        self.assertRaises(ValueError, numpu._at, (3, -1))
        numpu = NumPuzzle(size=(1, 3), seed=0)
        self.assertRaises(ValueError, numpu._at, (-1, -1))
        self.assertRaises(ValueError, numpu._at, (-1, 0))
        self.assertRaises(ValueError, numpu._at, (0, -1))
        self.assertRaises(ValueError, numpu._at, (1, 3))
        self.assertRaises(ValueError, numpu._at, (1, 2))
        self.assertRaises(ValueError, numpu._at, (0, 3))
        self.assertRaises(ValueError, numpu._at, (-1, 3))
        self.assertRaises(ValueError, numpu._at, (1, -1))
        numpu = NumPuzzle(size=(1, 1), seed=0)
        self.assertRaises(ValueError, numpu._at, (-1, -1))
        self.assertRaises(ValueError, numpu._at, (-1, 0))
        self.assertRaises(ValueError, numpu._at, (0, -1))
        self.assertRaises(ValueError, numpu._at, (1, 1))
        self.assertRaises(ValueError, numpu._at, (1, 0))
        self.assertRaises(ValueError, numpu._at, (0, 1))
        self.assertRaises(ValueError, numpu._at, (-1, 1))
        self.assertRaises(ValueError, numpu._at, (1, -1))
        # Check if valid input doesn't raise errors.
        # # NumPuzzle with same width and height.
        numpu = NumPuzzle(size=(3, 3), seed=0)
        numpu._at((0, 0))
        numpu._at((2, 0))
        numpu._at((0, 2))
        numpu._at((2, 2))
        # # NumPuzzles with different width and height.
        numpu = NumPuzzle(size=(3, 2), seed=0)
        numpu._at((0, 0))
        numpu._at((2, 0))
        numpu._at((0, 1))
        numpu._at((2, 1))
        numpu = NumPuzzle(size=(2, 3), seed=0)
        numpu._at((0, 0))
        numpu._at((1, 0))
        numpu._at((0, 2))
        numpu._at((1, 2))
        # # Edge cases.
        numpu = NumPuzzle(size=(3, 1), seed=0)
        numpu._at((0, 0))
        numpu._at((2, 0))
        numpu = NumPuzzle(size=(1, 3), seed=0)
        numpu._at((0, 0))
        numpu._at((0, 2))
        numpu = NumPuzzle(size=(1, 1), seed=0)
        numpu._at((0, 0))

    def test_correctness(self):
        # Check if method returns correct values.
        # # Check normal boards.
        # # # 3x3 NumPuzzles.
        numpu = NumPuzzle(size=(3, 3), seed=0)
        self.assertEqual(numpu._at((0, 0)), 1)
        self.assertEqual(numpu._at((1, 0)), 2)
        self.assertEqual(numpu._at((2, 0)), 3)
        self.assertEqual(numpu._at((0, 1)), 4)
        self.assertEqual(numpu._at((1, 1)), 5)
        self.assertEqual(numpu._at((2, 1)), 6)
        self.assertEqual(numpu._at((0, 2)), 7)
        self.assertEqual(numpu._at((1, 2)), 8)
        self.assertEqual(numpu._at((2, 2)), 0)
        numpu = NumPuzzle(size=(3, 3), seed=362879)
        self.assertEqual(numpu._at((0, 0)), 0)
        self.assertEqual(numpu._at((1, 0)), 8)
        self.assertEqual(numpu._at((2, 0)), 7)
        self.assertEqual(numpu._at((0, 1)), 6)
        self.assertEqual(numpu._at((1, 1)), 5)
        self.assertEqual(numpu._at((2, 1)), 4)
        self.assertEqual(numpu._at((0, 2)), 3)
        self.assertEqual(numpu._at((1, 2)), 2)
        self.assertEqual(numpu._at((2, 2)), 1)
        # # # 2x2 NumPuzzles.
        numpu = NumPuzzle(size=(2, 2), seed=0)
        self.assertEqual(numpu._at((0, 0)), 1)
        self.assertEqual(numpu._at((1, 0)), 2)
        self.assertEqual(numpu._at((0, 1)), 3)
        self.assertEqual(numpu._at((1, 1)), 0)
        numpu = NumPuzzle(size=(2, 2), seed=23)
        self.assertEqual(numpu._at((0, 0)), 0)
        self.assertEqual(numpu._at((1, 0)), 3)
        self.assertEqual(numpu._at((0, 1)), 2)
        self.assertEqual(numpu._at((1, 1)), 1)
        # # # 4x4 NumPuzzles.
        numpu = NumPuzzle(size=(4, 4), seed=0)
        self.assertEqual(numpu._at((0, 0)), 1)
        self.assertEqual(numpu._at((1, 0)), 2)
        self.assertEqual(numpu._at((2, 0)), 3)
        self.assertEqual(numpu._at((3, 0)), 4)
        self.assertEqual(numpu._at((0, 1)), 5)
        self.assertEqual(numpu._at((1, 1)), 6)
        self.assertEqual(numpu._at((2, 1)), 7)
        self.assertEqual(numpu._at((3, 1)), 8)
        self.assertEqual(numpu._at((0, 2)), 9)
        self.assertEqual(numpu._at((1, 2)), 10)
        self.assertEqual(numpu._at((2, 2)), 11)
        self.assertEqual(numpu._at((3, 2)), 12)
        self.assertEqual(numpu._at((0, 3)), 13)
        self.assertEqual(numpu._at((1, 3)), 14)
        self.assertEqual(numpu._at((2, 3)), 15)
        self.assertEqual(numpu._at((3, 3)), 0)
        numpu = NumPuzzle(size=(4, 4), seed=20922789887999)
        self.assertEqual(numpu._at((0, 0)), 0)
        self.assertEqual(numpu._at((1, 0)), 15)
        self.assertEqual(numpu._at((2, 0)), 14)
        self.assertEqual(numpu._at((3, 0)), 13)
        self.assertEqual(numpu._at((0, 1)), 12)
        self.assertEqual(numpu._at((1, 1)), 11)
        self.assertEqual(numpu._at((2, 1)), 10)
        self.assertEqual(numpu._at((3, 1)), 9)
        self.assertEqual(numpu._at((0, 2)), 8)
        self.assertEqual(numpu._at((1, 2)), 7)
        self.assertEqual(numpu._at((2, 2)), 6)
        self.assertEqual(numpu._at((3, 2)), 5)
        self.assertEqual(numpu._at((0, 3)), 4)
        self.assertEqual(numpu._at((1, 3)), 3)
        self.assertEqual(numpu._at((2, 3)), 2)
        self.assertEqual(numpu._at((3, 3)), 1)
        # # Check boards with different width and height.
        # # # 3x2 NumPuzzles.
        numpu = NumPuzzle(size=(3, 2), seed=0)
        self.assertEqual(numpu._at((0, 0)), 1)
        self.assertEqual(numpu._at((1, 0)), 2)
        self.assertEqual(numpu._at((2, 0)), 3)
        self.assertEqual(numpu._at((0, 1)), 4)
        self.assertEqual(numpu._at((1, 1)), 5)
        self.assertEqual(numpu._at((2, 1)), 0)
        numpu = NumPuzzle(size=(3, 2), seed=719)
        self.assertEqual(numpu._at((0, 0)), 0)
        self.assertEqual(numpu._at((1, 0)), 5)
        self.assertEqual(numpu._at((2, 0)), 4)
        self.assertEqual(numpu._at((0, 1)), 3)
        self.assertEqual(numpu._at((1, 1)), 2)
        self.assertEqual(numpu._at((2, 1)), 1)
        # # # 2x3 NumPuzzles.
        numpu = NumPuzzle(size=(2, 3), seed=0)
        self.assertEqual(numpu._at((0, 0)), 1)
        self.assertEqual(numpu._at((1, 0)), 2)
        self.assertEqual(numpu._at((0, 1)), 3)
        self.assertEqual(numpu._at((1, 1)), 4)
        self.assertEqual(numpu._at((0, 2)), 5)
        self.assertEqual(numpu._at((1, 2)), 0)
        numpu = NumPuzzle(size=(2, 3), seed=719)
        self.assertEqual(numpu._at((0, 0)), 0)
        self.assertEqual(numpu._at((1, 0)), 5)
        self.assertEqual(numpu._at((0, 1)), 4)
        self.assertEqual(numpu._at((1, 1)), 3)
        self.assertEqual(numpu._at((0, 2)), 2)
        self.assertEqual(numpu._at((1, 2)), 1)
        # # Check edge cases.
        # # # 3x1 NumPuzzles.
        numpu = NumPuzzle(size=(3, 1), seed=0)
        self.assertEqual(numpu._at((0, 0)), 1)
        self.assertEqual(numpu._at((1, 0)), 2)
        self.assertEqual(numpu._at((2, 0)), 0)
        numpu = NumPuzzle(size=(3, 1), seed=5)
        self.assertEqual(numpu._at((0, 0)), 0)
        self.assertEqual(numpu._at((1, 0)), 2)
        self.assertEqual(numpu._at((2, 0)), 1)
        # # # 1x3 NumPuzzles.
        numpu = NumPuzzle(size=(1, 3), seed=0)
        self.assertEqual(numpu._at((0, 0)), 1)
        self.assertEqual(numpu._at((0, 1)), 2)
        self.assertEqual(numpu._at((0, 2)), 0)
        numpu = NumPuzzle(size=(1, 3), seed=5)
        self.assertEqual(numpu._at((0, 0)), 0)
        self.assertEqual(numpu._at((0, 1)), 2)
        self.assertEqual(numpu._at((0, 2)), 1)
        # # # 1x1 NumPuzzle.
        numpu = NumPuzzle(size=(1, 1), seed=0)
        self.assertEqual(numpu._at((0, 0)), 0)


if __name__ == "__main__":
    unittest.main()
