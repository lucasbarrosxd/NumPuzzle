# Import libraries.
import unittest
# Import from project.
# # Import implementations to test.
from python import NumPuzzleL, NumPuzzleD, NumPuzzleS

# NumPuzzle class to run tests with. Change to run tests with a different implementation.
NumPuzzle = NumPuzzleL.NumPuzzle


class FindTests(unittest.TestCase):
    def test_input_validation(self):
        # Check if invalid input raises errors.
        # # Check normal NumPuzzles.
        # # # 3x3 NumPuzzles.
        numpu = NumPuzzle(size=(3, 3), seed=0)
        self.assertRaises(ValueError, numpu._find, number=-1)
        self.assertRaises(ValueError, numpu._find, number=9)
        numpu = NumPuzzle(size=(3, 3), seed=123456)
        self.assertRaises(ValueError, numpu._find, number=-1)
        self.assertRaises(ValueError, numpu._find, number=9)
        numpu = NumPuzzle(size=(3, 3), seed=362879)
        self.assertRaises(ValueError, numpu._find, number=-1)
        self.assertRaises(ValueError, numpu._find, number=9)
        # # # 2x2 NumPuzzles.
        numpu = NumPuzzle(size=(2, 2), seed=0)
        self.assertRaises(ValueError, numpu._find, number=-1)
        self.assertRaises(ValueError, numpu._find, number=4)
        numpu = NumPuzzle(size=(2, 2), seed=12)
        self.assertRaises(ValueError, numpu._find, number=-1)
        self.assertRaises(ValueError, numpu._find, number=4)
        numpu = NumPuzzle(size=(2, 2), seed=23)
        self.assertRaises(ValueError, numpu._find, number=-1)
        self.assertRaises(ValueError, numpu._find, number=4)
        # # # 4x4 NumPuzzles.
        numpu = NumPuzzle(size=(4, 4), seed=0)
        self.assertRaises(ValueError, numpu._find, number=-1)
        self.assertRaises(ValueError, numpu._find, number=16)
        numpu = NumPuzzle(size=(4, 4), seed=12345678901234)
        self.assertRaises(ValueError, numpu._find, number=-1)
        self.assertRaises(ValueError, numpu._find, number=16)
        numpu = NumPuzzle(size=(4, 4), seed=20922789887999)
        self.assertRaises(ValueError, numpu._find, number=-1)
        self.assertRaises(ValueError, numpu._find, number=16)
        # # Check NumPuzzles with different width and height.
        # # # 3x2 NumPuzzles.
        numpu = NumPuzzle(size=(3, 2), seed=0)
        self.assertRaises(ValueError, numpu._find, number=-1)
        self.assertRaises(ValueError, numpu._find, number=6)
        numpu = NumPuzzle(size=(3, 2), seed=123)
        self.assertRaises(ValueError, numpu._find, number=-1)
        self.assertRaises(ValueError, numpu._find, number=6)
        numpu = NumPuzzle(size=(3, 2), seed=719)
        self.assertRaises(ValueError, numpu._find, number=-1)
        self.assertRaises(ValueError, numpu._find, number=6)
        # # # 2x3 NumPuzzles.
        numpu = NumPuzzle(size=(2, 3), seed=0)
        self.assertRaises(ValueError, numpu._find, number=-1)
        self.assertRaises(ValueError, numpu._find, number=6)
        numpu = NumPuzzle(size=(2, 3), seed=123)
        self.assertRaises(ValueError, numpu._find, number=-1)
        self.assertRaises(ValueError, numpu._find, number=6)
        numpu = NumPuzzle(size=(2, 3), seed=719)
        self.assertRaises(ValueError, numpu._find, number=-1)
        self.assertRaises(ValueError, numpu._find, number=6)
        # # Check edge cases.
        # # # 3x1 NumPuzzles.
        numpu = NumPuzzle(size=(3, 1), seed=0)
        self.assertRaises(ValueError, numpu._find, number=-1)
        self.assertRaises(ValueError, numpu._find, number=3)
        numpu = NumPuzzle(size=(3, 1), seed=1)
        self.assertRaises(ValueError, numpu._find, number=-1)
        self.assertRaises(ValueError, numpu._find, number=3)
        numpu = NumPuzzle(size=(3, 1), seed=5)
        self.assertRaises(ValueError, numpu._find, number=-1)
        self.assertRaises(ValueError, numpu._find, number=3)
        # # # 1x3 NumPuzzles.
        numpu = NumPuzzle(size=(1, 3), seed=0)
        self.assertRaises(ValueError, numpu._find, number=-1)
        self.assertRaises(ValueError, numpu._find, number=3)
        numpu = NumPuzzle(size=(1, 3), seed=1)
        self.assertRaises(ValueError, numpu._find, number=-1)
        self.assertRaises(ValueError, numpu._find, number=3)
        numpu = NumPuzzle(size=(1, 3), seed=5)
        self.assertRaises(ValueError, numpu._find, number=-1)
        self.assertRaises(ValueError, numpu._find, number=3)
        # # # 1x1 NumPuzzle.
        numpu = NumPuzzle(size=(1, 1), seed=0)
        self.assertRaises(ValueError, numpu._find, number=-1)
        self.assertRaises(ValueError, numpu._find, number=1)
        # Check if valid input doesn't raise errors.
        # # Check normal boards.
        # # # 3x3 NumPuzzle.
        numpu = NumPuzzle(size=(3, 3), seed=0)
        numpu._find(1)
        numpu._find(2)
        numpu._find(3)
        numpu._find(4)
        numpu._find(5)
        numpu._find(6)
        numpu._find(7)
        numpu._find(8)
        numpu._find(0)
        # # # 2x2 NumPuzzle.
        numpu = NumPuzzle(size=(2, 2), seed=0)
        numpu._find(1)
        numpu._find(2)
        numpu._find(3)
        numpu._find(0)
        # # # 4x4 NumPuzzle
        numpu = NumPuzzle(size=(4, 4), seed=0)
        numpu._find(1)
        numpu._find(2)
        numpu._find(3)
        numpu._find(4)
        numpu._find(5)
        numpu._find(6)
        numpu._find(7)
        numpu._find(8)
        numpu._find(9)
        numpu._find(10)
        numpu._find(11)
        numpu._find(12)
        numpu._find(13)
        numpu._find(14)
        numpu._find(15)
        numpu._find(0)
        # # Check NumPuzzles with different width and height.
        # # # 3x2 NumPuzzle.
        numpu = NumPuzzle(size=(3, 2), seed=0)
        numpu._find(1)
        numpu._find(2)
        numpu._find(3)
        numpu._find(4)
        numpu._find(5)
        numpu._find(0)
        # # # 2x3 NumPuzzle.
        numpu = NumPuzzle(size=(2, 3), seed=0)
        numpu._find(1)
        numpu._find(2)
        numpu._find(3)
        numpu._find(4)
        numpu._find(5)
        numpu._find(0)
        # # Check edge cases.
        # # # 3x1 NumPuzzle.
        numpu = NumPuzzle(size=(3, 1), seed=0)
        numpu._find(1)
        numpu._find(2)
        numpu._find(0)
        # # # 1x3 NumPuzzle.
        numpu = NumPuzzle(size=(1, 3), seed=0)
        numpu._find(1)
        numpu._find(2)
        numpu._find(0)
        # # # 1x1 NumPuzzle.
        numpu = NumPuzzle(size=(1, 1), seed=0)
        numpu._find(0)

    def test_correctness(self):
        # Check if method returns correct values.
        # # Check normal boards.
        # # # 3x3 NumPuzzle.
        numpu = NumPuzzle(size=(3, 3), seed=0)
        self.assertTupleEqual(numpu._find(1), (0, 0))
        self.assertTupleEqual(numpu._find(2), (1, 0))
        self.assertTupleEqual(numpu._find(3), (2, 0))
        self.assertTupleEqual(numpu._find(4), (0, 1))
        self.assertTupleEqual(numpu._find(5), (1, 1))
        self.assertTupleEqual(numpu._find(6), (2, 1))
        self.assertTupleEqual(numpu._find(7), (0, 2))
        self.assertTupleEqual(numpu._find(8), (1, 2))
        self.assertTupleEqual(numpu._find(0), (2, 2))
        numpu = NumPuzzle(size=(3, 3), seed=362879)
        self.assertTupleEqual(numpu._find(0), (0, 0))
        self.assertTupleEqual(numpu._find(8), (1, 0))
        self.assertTupleEqual(numpu._find(7), (2, 0))
        self.assertTupleEqual(numpu._find(6), (0, 1))
        self.assertTupleEqual(numpu._find(5), (1, 1))
        self.assertTupleEqual(numpu._find(4), (2, 1))
        self.assertTupleEqual(numpu._find(3), (0, 2))
        self.assertTupleEqual(numpu._find(2), (1, 2))
        self.assertTupleEqual(numpu._find(1), (2, 2))
        # # # 2x2 NumPuzzles.
        numpu = NumPuzzle(size=(2, 2), seed=0)
        self.assertTupleEqual(numpu._find(1), (0, 0))
        self.assertTupleEqual(numpu._find(2), (1, 0))
        self.assertTupleEqual(numpu._find(3), (0, 1))
        self.assertTupleEqual(numpu._find(0), (1, 1))
        numpu = NumPuzzle(size=(2, 2), seed=23)
        self.assertTupleEqual(numpu._find(0), (0, 0))
        self.assertTupleEqual(numpu._find(3), (1, 0))
        self.assertTupleEqual(numpu._find(2), (0, 1))
        self.assertTupleEqual(numpu._find(1), (1, 1))
        # # # 4x4 NumPuzzles.
        numpu = NumPuzzle(size=(4, 4), seed=0)
        self.assertTupleEqual(numpu._find(1), (0, 0))
        self.assertTupleEqual(numpu._find(2), (1, 0))
        self.assertTupleEqual(numpu._find(3), (2, 0))
        self.assertTupleEqual(numpu._find(4), (3, 0))
        self.assertTupleEqual(numpu._find(5), (0, 1))
        self.assertTupleEqual(numpu._find(6), (1, 1))
        self.assertTupleEqual(numpu._find(7), (2, 1))
        self.assertTupleEqual(numpu._find(8), (3, 1))
        self.assertTupleEqual(numpu._find(9), (0, 2))
        self.assertTupleEqual(numpu._find(10), (1, 2))
        self.assertTupleEqual(numpu._find(11), (2, 2))
        self.assertTupleEqual(numpu._find(12), (3, 2))
        self.assertTupleEqual(numpu._find(13), (0, 3))
        self.assertTupleEqual(numpu._find(14), (1, 3))
        self.assertTupleEqual(numpu._find(15), (2, 3))
        self.assertTupleEqual(numpu._find(0), (3, 3))
        numpu = NumPuzzle(size=(4, 4), seed=20922789887999)
        self.assertTupleEqual(numpu._find(0), (0, 0))
        self.assertTupleEqual(numpu._find(15), (1, 0))
        self.assertTupleEqual(numpu._find(14), (2, 0))
        self.assertTupleEqual(numpu._find(13), (3, 0))
        self.assertTupleEqual(numpu._find(12), (0, 1))
        self.assertTupleEqual(numpu._find(11), (1, 1))
        self.assertTupleEqual(numpu._find(10), (2, 1))
        self.assertTupleEqual(numpu._find(9), (3, 1))
        self.assertTupleEqual(numpu._find(8), (0, 2))
        self.assertTupleEqual(numpu._find(7), (1, 2))
        self.assertTupleEqual(numpu._find(6), (2, 2))
        self.assertTupleEqual(numpu._find(5), (3, 2))
        self.assertTupleEqual(numpu._find(4), (0, 3))
        self.assertTupleEqual(numpu._find(3), (1, 3))
        self.assertTupleEqual(numpu._find(2), (2, 3))
        self.assertTupleEqual(numpu._find(1), (3, 3))
        # # Check boards with different width and height.
        # # # 3x2 NumPuzzles.
        numpu = NumPuzzle(size=(3, 2), seed=0)
        self.assertTupleEqual(numpu._find(1), (0, 0))
        self.assertTupleEqual(numpu._find(2), (1, 0))
        self.assertTupleEqual(numpu._find(3), (2, 0))
        self.assertTupleEqual(numpu._find(4), (0, 1))
        self.assertTupleEqual(numpu._find(5), (1, 1))
        self.assertTupleEqual(numpu._find(0), (2, 1))
        numpu = NumPuzzle(size=(3, 2), seed=719)
        self.assertTupleEqual(numpu._find(0), (0, 0))
        self.assertTupleEqual(numpu._find(5), (1, 0))
        self.assertTupleEqual(numpu._find(4), (2, 0))
        self.assertTupleEqual(numpu._find(3), (0, 1))
        self.assertTupleEqual(numpu._find(2), (1, 1))
        self.assertTupleEqual(numpu._find(1), (2, 1))
        # # # 2x3 NumPuzzles.
        numpu = NumPuzzle(size=(2, 3), seed=0)
        self.assertTupleEqual(numpu._find(1), (0, 0))
        self.assertTupleEqual(numpu._find(2), (1, 0))
        self.assertTupleEqual(numpu._find(3), (0, 1))
        self.assertTupleEqual(numpu._find(4), (1, 1))
        self.assertTupleEqual(numpu._find(5), (0, 2))
        self.assertTupleEqual(numpu._find(0), (1, 2))
        numpu = NumPuzzle(size=(2, 3), seed=719)
        self.assertTupleEqual(numpu._find(0), (0, 0))
        self.assertTupleEqual(numpu._find(5), (1, 0))
        self.assertTupleEqual(numpu._find(4), (0, 1))
        self.assertTupleEqual(numpu._find(3), (1, 1))
        self.assertTupleEqual(numpu._find(2), (0, 2))
        self.assertTupleEqual(numpu._find(1), (1, 2))
        # # Check edge cases.
        # # # 3x1 NumPuzzles.
        numpu = NumPuzzle(size=(3, 1), seed=0)
        self.assertTupleEqual(numpu._find(1), (0, 0))
        self.assertTupleEqual(numpu._find(2), (1, 0))
        self.assertTupleEqual(numpu._find(0), (2, 0))
        numpu = NumPuzzle(size=(3, 1), seed=5)
        self.assertTupleEqual(numpu._find(0), (0, 0))
        self.assertTupleEqual(numpu._find(2), (1, 0))
        self.assertTupleEqual(numpu._find(1), (2, 0))
        # # # 1x3 NumPuzzles.
        numpu = NumPuzzle(size=(1, 3), seed=0)
        self.assertTupleEqual(numpu._find(1), (0, 0))
        self.assertTupleEqual(numpu._find(2), (0, 1))
        self.assertTupleEqual(numpu._find(0), (0, 2))
        numpu = NumPuzzle(size=(1, 3), seed=5)
        self.assertTupleEqual(numpu._find(0), (0, 0))
        self.assertTupleEqual(numpu._find(2), (0, 1))
        self.assertTupleEqual(numpu._find(1), (0, 2))
        # # # 1x1 NumPuzzle.
        numpu = NumPuzzle(size=(1, 1), seed=0)
        self.assertTupleEqual(numpu._find(0), (0, 0))


if __name__ == "__init__":
    unittest.main()
