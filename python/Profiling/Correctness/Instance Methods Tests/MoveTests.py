# Import libraries.
import unittest
# Import from project.
# # Import implementations to test.
from python import NumPuzzleL, NumPuzzleD, NumPuzzleS

# NumPuzzle class to run tests with. Change to run tests with a different implementation.
NumPuzzle = NumPuzzleL.NumPuzzle


class MoveTests(unittest.TestCase):
    def test_input_validation(self):
        # Check if invalid values raise errors.
        # # Check invalid direction.
        numpu = NumPuzzle(size=(3, 3), seed=0)
        self.assertRaises(ValueError, numpu.move, direction="")
        self.assertRaises(ValueError, numpu.move, direction="ABCDEF")
        self.assertRaises(ValueError, numpu.move, direction="UDLR")
        self.assertRaises(ValueError, numpu.move, direction="UD")
        self.assertRaises(ValueError, numpu.move, direction="LR")
        self.assertRaises(ValueError, numpu.move, direction="NWSE")
        numpu = NumPuzzle(size=(2, 2), seed=0)
        self.assertRaises(ValueError, numpu.move, direction="")
        self.assertRaises(ValueError, numpu.move, direction="ABCDEF")
        self.assertRaises(ValueError, numpu.move, direction="UDLR")
        self.assertRaises(ValueError, numpu.move, direction="UD")
        self.assertRaises(ValueError, numpu.move, direction="LR")
        self.assertRaises(ValueError, numpu.move, direction="NWSE")
        # # Check if valid directions don't raise errors.
        numpu = NumPuzzle(size=(3, 3), seed=0)
        numpu.move(direction="U", on_blank=True)
        numpu.move(direction="L", on_blank=True)
        numpu.move(direction="D", on_blank=True)
        numpu.move(direction="R", on_blank=True)
        numpu.move(direction="R", on_blank=False)
        numpu.move(direction="D", on_blank=False)
        numpu.move(direction="L", on_blank=False)
        numpu.move(direction="U", on_blank=False)
        numpu.move(direction="D", on_blank=False)
        numpu.move(direction="R", on_blank=False)
        numpu.move(direction="U", on_blank=False)
        numpu.move(direction="L", on_blank=False)
        numpu.move(direction="L", on_blank=True)
        numpu.move(direction="U", on_blank=True)
        numpu.move(direction="R", on_blank=True)
        numpu.move(direction="D", on_blank=True)
        # # Check if moves over edges raise errors.
        # # # Bottom-right corner.
        numpu = NumPuzzle(size=(3, 3), board=[[1, 2, 3], [4, 5, 6], [7, 8, 0]])
        self.assertRaises(ValueError, numpu.move, direction="D", on_blank=True)
        self.assertRaises(ValueError, numpu.move, direction="R", on_blank=True)
        self.assertRaises(ValueError, numpu.move, direction="U", on_blank=False)
        self.assertRaises(ValueError, numpu.move, direction="L", on_blank=False)
        # # # Top-right corner.
        numpu = NumPuzzle(size=(3, 3), board=[[1, 2, 3], [4, 5, 6], [0, 8, 7]])
        self.assertRaises(ValueError, numpu.move, direction="U", on_blank=True)
        self.assertRaises(ValueError, numpu.move, direction="R", on_blank=True)
        self.assertRaises(ValueError, numpu.move, direction="D", on_blank=False)
        self.assertRaises(ValueError, numpu.move, direction="L", on_blank=False)
        # # # Top-left corner.
        numpu = NumPuzzle(size=(3, 3), board=[[0, 2, 3], [4, 5, 6], [7, 8, 1]])
        self.assertRaises(ValueError, numpu.move, direction="U", on_blank=True)
        self.assertRaises(ValueError, numpu.move, direction="L", on_blank=True)
        self.assertRaises(ValueError, numpu.move, direction="D", on_blank=False)
        self.assertRaises(ValueError, numpu.move, direction="R", on_blank=False)
        # # # Bottom-left corner.
        numpu = NumPuzzle(size=(3, 3), board=[[1, 2, 0], [4, 5, 6], [7, 8, 3]])
        self.assertRaises(ValueError, numpu.move, direction="D", on_blank=True)
        self.assertRaises(ValueError, numpu.move, direction="L", on_blank=True)
        self.assertRaises(ValueError, numpu.move, direction="U", on_blank=False)
        self.assertRaises(ValueError, numpu.move, direction="R", on_blank=False)
        # # # Top side.
        numpu = NumPuzzle(size=(3, 3), board=[[1, 2, 3], [0, 5, 6], [7, 8, 4]])
        self.assertRaises(ValueError, numpu.move, direction="U", on_blank=True)
        self.assertRaises(ValueError, numpu.move, direction="D", on_blank=False)
        # # # Left side.
        numpu = NumPuzzle(size=(3, 3), board=[[1, 0, 3], [4, 5, 6], [7, 8, 2]])
        self.assertRaises(ValueError, numpu.move, direction="L", on_blank=True)
        self.assertRaises(ValueError, numpu.move, direction="R", on_blank=False)
        # # # Bottom side.
        numpu = NumPuzzle(size=(3, 3), board=[[1, 2, 3], [4, 5, 0], [7, 8, 6]])
        self.assertRaises(ValueError, numpu.move, direction="D", on_blank=True)
        self.assertRaises(ValueError, numpu.move, direction="U", on_blank=False)
        # # # Right side.
        numpu = NumPuzzle(size=(3, 3), board=[[1, 2, 3], [4, 5, 6], [7, 0, 8]])
        self.assertRaises(ValueError, numpu.move, direction="R", on_blank=True)
        self.assertRaises(ValueError, numpu.move, direction="L", on_blank=False)
        # # Check if valid moves don't raise errors.
        # # # Bottom-right corner.
        numpu = NumPuzzle(size=(3, 3), board=[[1, 2, 3], [4, 5, 6], [7, 8, 0]])
        numpu.move(direction="U", on_blank=True)
        numpu = NumPuzzle(size=(3, 3), board=[[1, 2, 3], [4, 5, 6], [7, 8, 0]])
        numpu.move(direction="L", on_blank=True)
        numpu = NumPuzzle(size=(3, 3), board=[[1, 2, 3], [4, 5, 6], [7, 8, 0]])
        numpu.move(direction="D", on_blank=False)
        numpu = NumPuzzle(size=(3, 3), board=[[1, 2, 3], [4, 5, 6], [7, 8, 0]])
        numpu.move(direction="R", on_blank=False)
        # # # Top-right corner.
        numpu = NumPuzzle(size=(3, 3), board=[[1, 2, 3], [4, 5, 6], [0, 8, 7]])
        numpu.move(direction="D", on_blank=True)
        numpu = NumPuzzle(size=(3, 3), board=[[1, 2, 3], [4, 5, 6], [0, 8, 7]])
        numpu.move(direction="L", on_blank=True)
        numpu = NumPuzzle(size=(3, 3), board=[[1, 2, 3], [4, 5, 6], [0, 8, 7]])
        numpu.move(direction="U", on_blank=False)
        numpu = NumPuzzle(size=(3, 3), board=[[1, 2, 3], [4, 5, 6], [0, 8, 7]])
        numpu.move(direction="R", on_blank=False)
        # # # Top-left corner.
        numpu = NumPuzzle(size=(3, 3), board=[[0, 2, 3], [4, 5, 6], [7, 8, 1]])
        numpu.move(direction="D", on_blank=True)
        numpu = NumPuzzle(size=(3, 3), board=[[0, 2, 3], [4, 5, 6], [7, 8, 1]])
        numpu.move(direction="R", on_blank=True)
        numpu = NumPuzzle(size=(3, 3), board=[[0, 2, 3], [4, 5, 6], [7, 8, 1]])
        numpu.move(direction="U", on_blank=False)
        numpu = NumPuzzle(size=(3, 3), board=[[0, 2, 3], [4, 5, 6], [7, 8, 1]])
        numpu.move(direction="L", on_blank=False)
        # # # Bottom-left corner.
        numpu = NumPuzzle(size=(3, 3), board=[[1, 2, 0], [4, 5, 6], [7, 8, 3]])
        numpu.move(direction="U", on_blank=True)
        numpu = NumPuzzle(size=(3, 3), board=[[1, 2, 0], [4, 5, 6], [7, 8, 3]])
        numpu.move(direction="R", on_blank=True)
        numpu = NumPuzzle(size=(3, 3), board=[[1, 2, 0], [4, 5, 6], [7, 8, 3]])
        numpu.move(direction="D", on_blank=False)
        numpu = NumPuzzle(size=(3, 3), board=[[1, 2, 0], [4, 5, 6], [7, 8, 3]])
        numpu.move(direction="L", on_blank=False)
        # # # Top side.
        numpu = NumPuzzle(size=(3, 3), board=[[1, 2, 3], [0, 5, 6], [7, 8, 4]])
        numpu.move(direction="L", on_blank=True)
        numpu = NumPuzzle(size=(3, 3), board=[[1, 2, 3], [0, 5, 6], [7, 8, 4]])
        numpu.move(direction="D", on_blank=True)
        numpu = NumPuzzle(size=(3, 3), board=[[1, 2, 3], [0, 5, 6], [7, 8, 4]])
        numpu.move(direction="R", on_blank=True)
        numpu = NumPuzzle(size=(3, 3), board=[[1, 2, 3], [0, 5, 6], [7, 8, 4]])
        numpu.move(direction="R", on_blank=False)
        numpu = NumPuzzle(size=(3, 3), board=[[1, 2, 3], [0, 5, 6], [7, 8, 4]])
        numpu.move(direction="U", on_blank=False)
        numpu = NumPuzzle(size=(3, 3), board=[[1, 2, 3], [0, 5, 6], [7, 8, 4]])
        numpu.move(direction="L", on_blank=False)
        # # # Left side.
        numpu = NumPuzzle(size=(3, 3), board=[[1, 0, 3], [4, 5, 6], [7, 8, 2]])
        numpu.move(direction="U", on_blank=True)
        numpu = NumPuzzle(size=(3, 3), board=[[1, 0, 3], [4, 5, 6], [7, 8, 2]])
        numpu.move(direction="R", on_blank=True)
        numpu = NumPuzzle(size=(3, 3), board=[[1, 0, 3], [4, 5, 6], [7, 8, 2]])
        numpu.move(direction="D", on_blank=True)
        numpu = NumPuzzle(size=(3, 3), board=[[1, 0, 3], [4, 5, 6], [7, 8, 2]])
        numpu.move(direction="D", on_blank=False)
        numpu = NumPuzzle(size=(3, 3), board=[[1, 0, 3], [4, 5, 6], [7, 8, 2]])
        numpu.move(direction="L", on_blank=False)
        numpu = NumPuzzle(size=(3, 3), board=[[1, 0, 3], [4, 5, 6], [7, 8, 2]])
        numpu.move(direction="U", on_blank=False)
        # # # Bottom side.
        numpu = NumPuzzle(size=(3, 3), board=[[1, 2, 3], [4, 5, 0], [7, 8, 6]])
        numpu.move(direction="L", on_blank=True)
        numpu = NumPuzzle(size=(3, 3), board=[[1, 2, 3], [4, 5, 0], [7, 8, 6]])
        numpu.move(direction="U", on_blank=True)
        numpu = NumPuzzle(size=(3, 3), board=[[1, 2, 3], [4, 5, 0], [7, 8, 6]])
        numpu.move(direction="R", on_blank=True)
        numpu = NumPuzzle(size=(3, 3), board=[[1, 2, 3], [4, 5, 0], [7, 8, 6]])
        numpu.move(direction="R", on_blank=False)
        numpu = NumPuzzle(size=(3, 3), board=[[1, 2, 3], [4, 5, 0], [7, 8, 6]])
        numpu.move(direction="D", on_blank=False)
        numpu = NumPuzzle(size=(3, 3), board=[[1, 2, 3], [4, 5, 0], [7, 8, 6]])
        numpu.move(direction="L", on_blank=False)
        # # # Right side.
        numpu = NumPuzzle(size=(3, 3), board=[[1, 2, 3], [4, 5, 6], [7, 0, 8]])
        numpu.move(direction="U", on_blank=True)
        numpu = NumPuzzle(size=(3, 3), board=[[1, 2, 3], [4, 5, 6], [7, 0, 8]])
        numpu.move(direction="L", on_blank=True)
        numpu = NumPuzzle(size=(3, 3), board=[[1, 2, 3], [4, 5, 6], [7, 0, 8]])
        numpu.move(direction="D", on_blank=True)
        numpu = NumPuzzle(size=(3, 3), board=[[1, 2, 3], [4, 5, 6], [7, 0, 8]])
        numpu.move(direction="D", on_blank=False)
        numpu = NumPuzzle(size=(3, 3), board=[[1, 2, 3], [4, 5, 6], [7, 0, 8]])
        numpu.move(direction="R", on_blank=False)
        numpu = NumPuzzle(size=(3, 3), board=[[1, 2, 3], [4, 5, 6], [7, 0, 8]])
        numpu.move(direction="U", on_blank=False)
        # # # Center
        numpu = NumPuzzle(size=(3, 3), board=[[1, 2, 3], [4, 0, 6], [7, 8, 5]])
        numpu.move(direction="U", on_blank=True)
        numpu = NumPuzzle(size=(3, 3), board=[[1, 2, 3], [4, 0, 6], [7, 8, 5]])
        numpu.move(direction="D", on_blank=True)
        numpu = NumPuzzle(size=(3, 3), board=[[1, 2, 3], [4, 0, 6], [7, 8, 5]])
        numpu.move(direction="L", on_blank=True)
        numpu = NumPuzzle(size=(3, 3), board=[[1, 2, 3], [4, 0, 6], [7, 8, 5]])
        numpu.move(direction="R", on_blank=True)
        numpu = NumPuzzle(size=(3, 3), board=[[1, 2, 3], [4, 0, 6], [7, 8, 5]])
        numpu.move(direction="D", on_blank=False)
        numpu = NumPuzzle(size=(3, 3), board=[[1, 2, 3], [4, 0, 6], [7, 8, 5]])
        numpu.move(direction="U", on_blank=False)
        numpu = NumPuzzle(size=(3, 3), board=[[1, 2, 3], [4, 0, 6], [7, 8, 5]])
        numpu.move(direction="R", on_blank=False)
        numpu = NumPuzzle(size=(3, 3), board=[[1, 2, 3], [4, 0, 6], [7, 8, 5]])
        numpu.move(direction="L", on_blank=False)

    def test_correctness(self):
        # Check if NumPuzzle's board has the right state after moves.
        # # 3x3 NumPuzzle.
        numpu = NumPuzzle(size=(3, 3), board=[[1, 4, 7], [2, 5, 8], [3, 6, 0]])
        numpu.move("U", on_blank=True)
        self.assertListEqual(numpu.board, [[1, 4, 7], [2, 5, 8], [3, 0, 6]])
        numpu.move("D", on_blank=False)
        self.assertListEqual(numpu.board, [[1, 4, 7], [2, 5, 8], [0, 3, 6]])
        numpu.move("L", on_blank=True)
        self.assertListEqual(numpu.board, [[1, 4, 7], [0, 5, 8], [2, 3, 6]])
        numpu.move("R", on_blank=False)
        self.assertListEqual(numpu.board, [[0, 4, 7], [1, 5, 8], [2, 3, 6]])
        numpu.move("D", on_blank=True)
        self.assertListEqual(numpu.board, [[4, 0, 7], [1, 5, 8], [2, 3, 6]])
        numpu.move("U", on_blank=False)
        self.assertListEqual(numpu.board, [[4, 7, 0], [1, 5, 8], [2, 3, 6]])
        numpu.move("R", on_blank=True)
        self.assertListEqual(numpu.board, [[4, 7, 8], [1, 5, 0], [2, 3, 6]])
        numpu.move("L", on_blank=False)
        self.assertListEqual(numpu.board, [[4, 7, 8], [1, 5, 6], [2, 3, 0]])
        # # 2x2 NumPuzzle.
        numpu = NumPuzzle(size=(2, 2), board=[[1, 3], [2, 0]])
        numpu.move(direction="L", on_blank=True)
        self.assertListEqual(numpu.board, [[1, 0], [2, 3]])
        numpu.move(direction="U", on_blank=True)
        self.assertListEqual(numpu.board, [[0, 1], [2, 3]])
        numpu.move(direction="R", on_blank=True)
        self.assertListEqual(numpu.board, [[2, 1], [0, 3]])
        numpu.move(direction="D", on_blank=True)
        self.assertListEqual(numpu.board, [[2, 1], [3, 0]])
        numpu.move(direction="R", on_blank=False)
        self.assertListEqual(numpu.board, [[2, 0], [3, 1]])
        numpu.move(direction="D", on_blank=False)
        self.assertListEqual(numpu.board, [[0, 2], [3, 1]])
        numpu.move(direction="L", on_blank=False)
        self.assertListEqual(numpu.board, [[3, 2], [0, 1]])
        numpu.move(direction="U", on_blank=False)
        self.assertListEqual(numpu.board, [[3, 2], [1, 0]])
        # # 3x2 NumPuzzle.
        numpu = NumPuzzle(size=(3, 2), board=[[1, 4], [2, 5], [3, 0]])
        numpu.move(direction="L", on_blank=True)
        self.assertListEqual(numpu.board, [[1, 4], [2, 0], [3, 5]])
        numpu.move(direction="R", on_blank=False)
        self.assertListEqual(numpu.board, [[1, 0], [2, 4], [3, 5]])
        numpu.move(direction="U", on_blank=True)
        self.assertListEqual(numpu.board, [[0, 1], [2, 4], [3, 5]])
        numpu.move(direction="R", on_blank=True)
        self.assertListEqual(numpu.board, [[2, 1], [0, 4], [3, 5]])
        numpu.move(direction="L", on_blank=False)
        self.assertListEqual(numpu.board, [[2, 1], [3, 4], [0, 5]])
        numpu.move(direction="D", on_blank=True)
        self.assertListEqual(numpu.board, [[2, 1], [3, 4], [5, 0]])
        # # 2x3 NumPuzzle.
        numpu = NumPuzzle(size=(2, 3), board=[[1, 3, 5], [2, 4, 0]])
        numpu.move(direction="L", on_blank=True)
        self.assertListEqual(numpu.board, [[1, 3, 0], [2, 4, 5]])
        numpu.move(direction="U", on_blank=True)
        self.assertListEqual(numpu.board, [[1, 0, 3], [2, 4, 5]])
        numpu.move(direction="D", on_blank=False)
        self.assertListEqual(numpu.board, [[0, 1, 3], [2, 4, 5]])
        numpu.move(direction="R", on_blank=True)
        self.assertListEqual(numpu.board, [[2, 1, 3], [0, 4, 5]])
        numpu.move(direction="D", on_blank=True)
        self.assertListEqual(numpu.board, [[2, 1, 3], [4, 0, 5]])
        numpu.move(direction="U", on_blank=False)
        self.assertListEqual(numpu.board, [[2, 1, 3], [4, 5, 0]])


if __name__ == "__main__":
    unittest.main()
